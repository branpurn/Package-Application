
# The first time you use this script, you'll need to change any [___] section to information specific to your org. Ex, SCCM site codes, etc.
# These are below the "DO NOT CHANGE ANYTHING BELOW THIS LINE" section. That section means that, after the script is set up, it will not need to be changed per app

###  =============================================================================================================================
###  =============================================================================================================================
###  =============================================================================================================================
###

#INSTRUCTIONS:  
    # Place this script into the PSADT Toolkit folder (the same directory that contains the Deploy-Application script)
    # Place the application's Icon in the same folder, and name it "icon.png"

    # In your Deploy-Application powershell script, change the Installer name to the "$newNameForInstaller" value you set below (default: "appInstaller.msi")
    # this script renames the newly downloaded installer to that name, so you never have to change your PSADT script again
    # Fill out these variables, then run this script with your ADMIN account (the account that has SCCM access)
    # Script must be run on a computer that has the SCCM Client installed

                            #============================ APP VARIABLES  ============================#

                            #Variables for the technician to change for each application:

                            #  NOTE:  REMEMBER !!!!!
                            #         if this is the first time using this script, 
                            #         change the PSADT Powershell script to reflect this new $NewNameForInstaller.  
                            #         It's the "Installation" section of PSADT, at " Execute-Process -Path '[app name] "
                            #         You'll only have to do this once!  
                            #         Make sure you use the correct file extension (exe or msi)

                            #Get the new installer 
                            #installer gets renamed
                            #make this the same name you call in your PSADT script, so you never have to change PSADT
                            $newNameForInstaller = "appInstaller.exe"  #what should the downloaded installer be called.  INCLUDE FILE EXTENSION!!!
                            $downloadURL = “https://download.mozilla.org/?product=firefox-esr-latest-ssl&os=win64&lang=en-US”  #On website, rightclick download link, copy link

                            $appName = "Mozilla Firefox"   #Name that appears in SCCM
                            $localName = "Mozilla Firefox"  #Name that appears in Software Center

                            $estimatedRuntime = "5" #in minutes
                            $owner = "zach" #your username

                            #Variables from a typical installed version of the application
                            $installPath = "%ProgramFiles%\Mozilla Firefox\"  #where is the application gets installed to -- used by detection method
                            $programFilename = "firefox.exe"  #the name of the executable after installed on the system.  --used by detection method

                            #If the installer does NOT have the Version Number embedded, manually set it here:
                            $Version = "60.3.0.6864"

            #    If the installer has the Version Number embedded within it, you can automatically find the Version Number
            #    To do this, comment out the $Version line above,
            #    Then scroll down to the bottom line of the "Download Installer" section.
            #    There, uncomment the $Version line, and the script will automatically find the version number                 

                            #=========================== END OF VARIABLES  ============================#


###
###  =============================================================================================================================
###  ========================================DO NOT CHANGE ANYTHING BELOW THIS LINE===============================================
###  =============================================================================================================================
### 
 
# This section contains no variables that need to be changed for each application. It will run the same regardless of the variables added above
# A tech using this script will never need to change the code below
# The first time you use this script, you'll need to change any [___] section to information specific to your org. Ex, SCCM site codes, etc.

#============================  CONNECT TO SCCM  ============================#

                                                #Debug Log
                                                Write-Host ""
                                                Write-Host "Connecting to Configuration Manager Site"

    #Connect this powershell instance to our Configuration Manager Site
    CD 'C:\Program Files (x86)\Microsoft Configuration Manager\AdminConsole\bin'
    Import-Module .\ConfigurationManager.psd1 
    CD [SITECODE]:

    $siteName = Get-CMSite Name

                                                #Debug Log
                                                Write-Host "Connected to [sitecode]"

 #============================  SET-UP VARIABLES  ============================#
  
    #location of this script when running
    $currentPath=Split-Path ((Get-Variable MyInvocation -Scope Script).Value).MyCommand.Path
    $currDate = Get-Date -Format g
    $CMAppName = $appName  + "_" + $Version

    $contentLoc = "[server location where you store your sccm apps]" + $appName  + "_" + $Version    #new app folder will be "AppName_1.0"
    $deployTypeName = $appName + " deploy script"    #deployment script will be named "AppName deploy script"
    $iconLoc = $currentPath + "\icon.png"  #assumes icon is in same location as this script, and called "icon.png"
    
    $distributionPointGroup = "[distribution point group name]"
    $targetCollection = "[name of collection to deploy this to]"     #which SCCM Collection to deploy this app to automatically

#============================  DOWNLOAD THE INSTALLER  ============================#

    $client = new-object System.Net.WebClient # Used to download installer

    #Where will we download the new installer to?  ie, "C:\temp\PSADT\Files\new7zipInstall.exe"
    $newInstallerPath = $currentPath + "\Files\" + $newNameForInstaller #Assumes using PSADT directory structure.  

    #Download the new Installer
    #Rename it to a generic name (set above in Variables section), so PSADT doesn't have to be updated each time
    $client.DownloadFile($downloadURL,$newInstallerPath)

#===If the installer has the Version Number embedded within it, you can automatically find the Version Number by un-commenting this:
    #   $Version = (Get-Item $newInstallerPath).VersionInfo.FileVersion

#============================  CREATE THE APP  ============================#

#Creates an empty application in SCCM
#moves it into the "[sccm folder]" folder in SCCM

                                                #Debug Log
                                                Write-Host ""
                                                Write-Host "Building Application"
                                                Write-Host $appName
                                                Write-Host "Version " $Version

New-CMApplication `
    -Name $CMAppName `
    -SoftwareVersion $Version `
    -Owner $owner `
    -ReleaseDate $currDate `
    -LocalizedName $localName `
    -IconLocationFile $iconLoc `
    | Move-CMObject -FolderPath "[sitename]:\Application\[sccm folder]" `
    | Out-Null

#============  COPY FOLDER TO CONFIGMGR1\SOURCES\APPLICATIONS =================#

                                                #Debug Log
                                                Write-Host ""
                                                Write-Host "Copying Content to [config mgr server]"
                                                Write-Host $contentLoc

#required Prefix because of fileshare weirdness.  
$fileSysLoc = "filesystem::" + $contentLoc 

# Make new folder on [config mgr] based on app name and version
New-Item -ItemType directory -Path $fileSysLoc | Out-Null #surpesses debug log

#copy contents of THIS folder to NEW folder
$allItems = $currentPath + "\*"  #every file in the folder we're running from (wildcard)
#copy every fild/folder from the folder we're in, to the new folder on configmgr server
Copy-Item $allItems -Destination $fileSysLoc -Recurse 


#============================  DETECTION METHOD  ============================#

    #Detection Method -- for use in the "Deployment Script" section. 

                                                #Debug Log
                                                Write-Host ""
                                                Write-Host "Creating Detection Method"
     
    #How to detect if the program is already installed
$detectionMethod = New-CMDetectionClauseFile `
    -FileName $programFilename `
    -PropertyType Version `
    -ExpectedValue $Version `
    -ExpressionOperator IsEquals `
    -Path $installPath `
    -Value:$true 
    #Explaination:  7z.Exe exists, it is installed, and it is version 18.05

#============================ DEPLOYMENT SCRIPT  ============================#

    #Creates the Deployment Script within the application, 
    #this also sets the Detection Method, which we defined above

                                                #Debug Log
                                                Write-Host "Building Deployment Script"
                                                Write-Host $deployTypeName

 Add-CMScriptDeploymentType `
    -ApplicationName $CMAppName `
    -DeploymentTypeName $deployTypeName `
    -ContentLocation $contentLoc `
    -AddDetectionClause $detectionMethod `
    -InstallCommand "Deploy-Application Install" `
    -UninstallCommand "Deploy-Application Uninstall" `
    -InstallationBehaviorType InstallForSystem `
    -LogonRequirementType WhetherOrNotUserLoggedOn `
    -EstimatedRuntimeMins $estimatedRuntime | Out-Null #surpesses debug log



#=========================== DISTRIBUTE AND DEPLOY ===============================#

                                                #Debug Log
                                                Write-Host ""
                                                Write-Host "Distributing " $CMAppName " to Distribution Point Group"

    #Distribute the content to the Distribution Point Group
    Start-CMContentDistribution -ApplicationName $CMAppName -DistributionPointGroupName $distributionPointGroup

                                                #Debug Log
                                                Write-Host "Deploying " $CMAppName " to " $targetCollection

    #Deploy the new application
    New-CMApplicationDeployment -CollectionName $targetCollection -Name $CMAppName -DeployAction Install -DeployPurpose Available | Out-Null #surpesses debug log
