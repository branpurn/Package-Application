Windows Auto-Packager, Ver. 1.0
Zac Hegwood, 10/23/2018
Modified, Brandon Purnell 10/19/2022
UNC Asheville

=========================================================================

What this script does:

1)Download the installer for the new version of the program
2)Copy the PSADT contents to the SCCM Applications folder on [server]
3)Create a new application in SCCM
4)Configures the new application
5)Creates the deployment script
6)Sets up the detection method based on Version Number
7)Deploys the application to the [collection name in sccm]

=========================================================================

HOW TO USE:

Simply run the "Autopackager" script (from this repository) in an elevated Powershell,
using the admin account that has admin access to the SCCM console.

=========================================================================

NOTES:

The AutoPackager assumes that you're using PSADT,
and this computer has the SCCM Client installed.
You do NOT have to have the SCCM Applications Directory on [server] mapped on your computer.

The Set-up below is only required once.

=========================================================================

SET-UP:

1.
Copy the following file into the source directory* of your PSADT folder:

-Autopackager (powershell script from this repository)

(*The source directory is the same folder that your "Deploy-Application" powershell script is in).

2.
In the source directory, delete the contents of your \Files folder.
This script will download the new installer automatically.

3.
In the same directory as Autopackager, save a png that will act as the Software Center icon of the application. 
It MUST be LESS than 200x200px.  Name this image "icon.png".

4.
In your Deploy-Application PSADT script, change the installer name to a generic name.
When this script downloads the new installer, it will rename it to this name.
This makes it so you never have to open the Deploy-Application script again.
You'll use this again in step 3.
For example, I change the installer name to "appInstaller.msi"

ie, change
## <Perform Installation tasks here>
Execute-MSI -Path 'googlechromestandaloneenterprise64.msi' -Parameters '/qn'
to:
## <Perform Installation tasks here>
Execute-MSI -Path 'appInstaller.msi' -Parameters '/qn'

You only have to change the "Path" name. The Parameters and filetype stay the same.
This works the same way for .exe as for .msi.

5.
In the AutoPackager script, change the variables at the top of the script.

-$newNameForInstaller = the generic installer name you changed in step 2. IT MUST MATCH.
-$downloadURL = the button you click on the website to download the new installer.
You can get this URL by right-clicking the button on the website and choosing "Copy Link Location".
-$appName = the name you want the application to have in the SCCM Admin Console.
-$localName = the name you want to appear within the user's Software Center.
-$estimatedRuntime = how long the app will take to install, in minutes. Default is 5.
-$owner = Your name or username.
-$installPath = where the program will be installed. This is how the detection method works.  Ex, "C:\Program Files\Google\Drive\"
-$programFilename = the name of the exe or msi once installed on the user's computer. Also used by detection method.  Ex, "drive.exe"
-$Version = the version number of this application.  This is how the detection method is set up.  It is also the only variable you will have to update each time.*
*If the installer has the Version Number imbedded,
then you can un-comment the line above this variable (and commend out this variable)
to automatically find the Version number.
In this case, you will never have to open this file again.

6.
Run the "AutoPackager" script in an elevated Powershell, using the admin account that has admin access to the SCCM console.

